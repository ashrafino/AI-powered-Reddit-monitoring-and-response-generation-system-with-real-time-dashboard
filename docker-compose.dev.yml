version: "3.9"
services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: redditbot
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Development backend with cached dependencies
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file: .env
    command: >
      bash -c "
        echo 'Waiting for database...' &&
        python -m app.scripts.db &&
        echo 'Creating admin user...' &&
        python -m app.scripts.create_admin &&
        echo 'Starting API server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
      "
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./requirements.txt:/app/requirements.txt
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres/redditbot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - APP_ENV=development
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
    restart: unless-stopped

  # Development worker with cached dependencies
  worker-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file: .env
    command: >
      bash -c "
        echo 'Waiting for backend...' &&
        until curl -f http://backend-dev:8001/api/health; do sleep 5; done &&
        echo 'Starting Celery worker...' &&
        celery -A app.celery_app.celery_app worker --loglevel=INFO
      "
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres/redditbot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_REDIS_MAX_RETRIES=10
      - CELERY_REDIS_RETRY_DELAY=5
      - APP_ENV=development
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
    volumes:
      - ./app:/app/app
    restart: unless-stopped

  # Development beat scheduler with cached dependencies
  beat-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file: .env
    command: >
      bash -c "
        echo 'Waiting for backend...' &&
        until curl -f http://backend-dev:8001/api/health; do sleep 5; done &&
        echo 'Starting Celery beat...' &&
        rm -f celerybeat-schedule* &&
        celery -A app.celery_app.celery_app beat --loglevel=INFO
      "
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres/redditbot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_REDIS_MAX_RETRIES=10
      - CELERY_REDIS_RETRY_DELAY=5
      - APP_ENV=development
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
    volumes:
      - ./app:/app/app
    restart: unless-stopped

  # Development frontend with hot reload
  frontend-dev:
    image: node:18-alpine
    working_dir: /app/frontend
    command: >
      sh -c "
        npm install &&
        npm run dev
      "
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/frontend
      - node_modules:/app/frontend/node_modules
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8001
      - NODE_ENV=development
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  node_modules: