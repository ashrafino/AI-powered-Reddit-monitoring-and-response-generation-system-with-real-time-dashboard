services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: redditbot
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      cache_from:
        - python:3.11-slim
    env_file: .env
    command: >
      bash -c "
        echo 'Waiting for database...' &&
        python -m app.scripts.db &&
        echo 'Creating admin user...' &&
        python -m app.scripts.create_admin &&
        echo 'Starting API server...' &&
        gunicorn app.main:app -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8001 --workers 2 --timeout 120 --graceful-timeout 60
      "
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres/redditbot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - APP_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      cache_from:
        - python:3.11-slim
    env_file: .env
    command: >
      bash -c "
        echo 'Waiting for backend...' &&
        until curl -f http://backend:8001/api/health; do sleep 5; done &&
        echo 'Starting Celery worker...' &&
        celery -A app.celery_app.celery_app worker --loglevel=INFO --concurrency=2
      "
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres/redditbot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_REDIS_MAX_RETRIES=10
      - CELERY_REDIS_RETRY_DELAY=5
      - APP_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
    restart: unless-stopped

  beat:
    build:
      context: .
      dockerfile: Dockerfile
      cache_from:
        - python:3.11-slim
    env_file: .env
    command: >
      bash -c "
        echo 'Waiting for backend...' &&
        until curl -f http://backend:8001/api/health; do sleep 5; done &&
        echo 'Starting Celery beat...' &&
        rm -f celerybeat-schedule* &&
        celery -A app.celery_app.celery_app beat --loglevel=INFO
      "
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres/redditbot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/1
      - CELERY_REDIS_MAX_RETRIES=10
      - CELERY_REDIS_RETRY_DELAY=5
      - APP_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_BASE=${FRONTEND_API_BASE:-http://localhost}
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: